package com.example.weatherapp;

import java.util.ArrayList;
import java.util.Calendar;

import Adapters.NavigationDrawerListAdapter;
import Fragments.HistoryFragment;
import Fragments.HomeFragment;
import Fragments.MapsFragment;
import Fragments.RSSFragment;
import Fragments.SettingsFragment;
import Misc.Constants;
import Misc.UserPreferences;
import android.app.AlarmManager;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;

import com.example.weatherapp.model.NavigationDrawerItem;
import com.example.weatherapp.model.WeatherListItem;

public class MainActivity extends FragmentActivity {

	private DrawerLayout drawerLayout;
	private ListView drawerList;
	private ActionBarDrawerToggle drawerToggle;

	// nav drawerTitle
	private CharSequence drawerTitle;
	private CharSequence appTitle;

	// slide menu items
	private String[] navigationMenuTitles;
	private TypedArray navigationMenuIcons;
	private ArrayList<NavigationDrawerItem> navigationDrawerItems;
	private NavigationDrawerListAdapter adapter;

	public static ArrayList<WeatherListItem> weatherStatsList;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// Inflate the XML Layout for this activity
		setContentView(R.layout.main_activity_layout);
		init();
		if (savedInstanceState == null) {
			// on first time display view for first nav item
			displayView(0);
		}
	}

	private void init() {
		// Create the UserPreference Singleton with the Context
		UserPreferences.getInstance(getApplicationContext());

		appTitle = drawerTitle = getTitle();

		// load slide menu array items
		navigationMenuTitles = getResources().getStringArray(
				R.array.nav_drawer_items);
		// load slide menu array icons
		navigationMenuIcons = getResources().obtainTypedArray(
				R.array.nav_drawer_icons);

		// get the Drawer layout
		drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		drawerList = (ListView) findViewById(R.id.list_slidermenu);

		// Drawer Items Initialization and adding the items
		navigationDrawerItems = new ArrayList<NavigationDrawerItem>();
		// add the items
		navigationDrawerItems.add(new NavigationDrawerItem(
				navigationMenuTitles[0], navigationMenuIcons.getResourceId(0,
						-1)));
		navigationDrawerItems.add(new NavigationDrawerItem(
				navigationMenuTitles[1], navigationMenuIcons.getResourceId(1,
						-1)));
		navigationDrawerItems.add(new NavigationDrawerItem(
				navigationMenuTitles[2], navigationMenuIcons.getResourceId(2,
						-1)));
		navigationDrawerItems.add(new NavigationDrawerItem(
				navigationMenuTitles[3], navigationMenuIcons.getResourceId(3,
						-1)));
		navigationDrawerItems.add(new NavigationDrawerItem(
				navigationMenuTitles[4], navigationMenuIcons.getResourceId(4,
						-1)));

		// Recyle the typed array
		navigationMenuIcons.recycle();

		// Setting the navigationm Drawer listAdapter
		adapter = new NavigationDrawerListAdapter(getApplicationContext(),
				navigationDrawerItems);
		drawerList.setAdapter(adapter);

		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		drawerToggle = new ActionBarDrawerToggle(this, drawerLayout,
				R.drawable.ic_drawer, R.string.app_name, R.string.app_name) {
			public void onDrawerClosed(View drawerView) {
				getActionBar().setTitle(appTitle);
				invalidateOptionsMenu();

			}

			public void onDrawerOpened(View drawerView) {
				getActionBar().setTitle(drawerTitle);
				invalidateOptionsMenu();
			};
		};

		drawerLayout.setDrawerListener(drawerToggle);

		drawerList.setOnItemClickListener(new SlideMenuClickListener());
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		boolean drawerOpen = drawerLayout.isDrawerOpen(drawerList);
		menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public void setTitle(CharSequence title) {
		super.setTitle(title);
		appTitle = title;
		getActionBar().setTitle(appTitle);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		super.onOptionsItemSelected(item);
		if (drawerToggle.onOptionsItemSelected(item))
			return true;

		switch (item.getItemId()) {
		case R.id.action_settings:
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}

	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		return;
	}

	/**
	 * Diplaying fragment view for selected nav drawer list item
	 * */
	private void displayView(int position) {
		// update the main content by replacing fragments
		Fragment fragment = null;
		switch (position) {
		case 0:
			fragment = new HomeFragment();
			break;
		case 1:
			fragment = new MapsFragment();
			break;
		case 2:
			fragment = new HistoryFragment();
			break;
		case 3:
			fragment = new SettingsFragment();
			break;
		default:
			break;
		}

		if (fragment != null) {
			FragmentManager fragmentManager = getSupportFragmentManager();
			fragmentManager.beginTransaction()
					.replace(R.id.frame_container, fragment).commit();

			// update selected item and title, then close the drawer
			drawerList.setItemChecked(position, true);
			drawerList.setSelection(position);
			setTitle(navigationMenuTitles[position]);
			drawerLayout.closeDrawer(drawerList);
		} else {
			// error in creating fragment
			Log.e("MainActivity", "Error in creating fragment");
		}
	}

	/**
	 * When using the ActionBarDrawerToggle, you must call it during
	 * onPostCreate() and onConfigurationChanged()...
	 */

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		drawerToggle.syncState();
	}

	/**
	 * Slide menu item click listener
	 * */
	private class SlideMenuClickListener implements
			ListView.OnItemClickListener {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			// display view for selected nav drawer item
			displayView(position);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		startServiceRepeating();
	}

	private void startServiceRepeating() {
		Calendar cal = Calendar.getInstance();

		Intent intent = new Intent(this, WeatherService.class);
		PendingIntent pintent = PendingIntent.getService(this, 0, intent, 0);
		AlarmManager alarm = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
		// Start every 30 seconds
		alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(),
				Constants.SERVICE_UPDATE_TIME, pintent);

	}
}
