package Network;

import java.util.ArrayList;

import Adapters.WeatherForNextDaysAdapter;
import Fragments.HomeFragment;
import Misc.Constants;
import Misc.UserPreferences;
import Model.WeatherListItem;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.TextView;
import dme.forecastiolib.FIOCurrently;
import dme.forecastiolib.FIODaily;
import dme.forecastiolib.FIODataPoint;
import dme.forecastiolib.ForecastIO;

public class GetWeatherStats extends AsyncTask<Void, Void, ForecastIO> {

	TextView temperatureTV;
	TextView weatherStateTV;
	TextView cityAndTimeTV;
	TextView lastUpdateTV;
	UserPreferences userPref;

	public GetWeatherStats(TextView temperatureTV, TextView weatherStateTV,
			TextView cityAndTimeTV, TextView lastUpdateTV) {
		this.temperatureTV = temperatureTV;
		this.weatherStateTV = weatherStateTV;
		this.cityAndTimeTV = cityAndTimeTV;
		this.lastUpdateTV = lastUpdateTV;
		userPref = UserPreferences.getUserPreferences();
	}

	@Override
	protected ForecastIO doInBackground(Void... params) {

		ForecastIO fio = null;
		try {
			fio = new ForecastIO(Constants.APIKEY);
			fio.setUnits(ForecastIO.UNITS_UK);
			fio.setExcludeURL("hourly,minutely");
			fio.getForecast(userPref.getLatitude() + "",
					userPref.getLongtitude() + "");
		} catch (Exception e) {
			Log.v(Constants.MAIN_LOG_Key, "Network Error");
			return null;
			
		}

		return fio;
	}

	@Override
	protected void onPostExecute(ForecastIO fio) {
		super.onPostExecute(fio);

		if (fio == null)
			return;

		// RESET THE list
		WeatherForNextDaysAdapter.weatherStatsList = new ArrayList<WeatherListItem>();

		FIODaily daily = new FIODaily(fio);
		// In case there is no daily data available
		if (daily.days() < 0)
			Log.v(Constants.MAIN_LOG_Key, "No daily data.");
		// Print daily data
		for (int i = 1; i < daily.days(); i++) {
			FIODataPoint day = daily.getDay(i);
			WeatherForNextDaysAdapter.weatherStatsList.add(new WeatherListItem(
					day));
		}

		HomeFragment.weatherDaysAdapter.notifyDataSetChanged();

		FIOCurrently currently = new FIOCurrently(fio);
		temperatureTV.setText(currently.get().temperature()
				+ Constants.celciusExtension);
		weatherStateTV.setText(currently.get().summary());
		cityAndTimeTV.setText(userPref.getCity());
		lastUpdateTV.setText(currently.get().time());
	}

}
